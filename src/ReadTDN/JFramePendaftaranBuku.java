package ReadTDN;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.ResultSet;
import com.mysql.jdbc.Statement;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import java.sql.*;
import javax.swing.JOptionPane;

import org.apache.commons.io.*;
import java.io.File;
import java.io.IOException;

/**
 *
 * @author ASUS
 */
//Polymorphism, kelas JFramePendaftaranBuku dapat memiliki implementasi khusus dari metode-metode yang diwarisi dari Master, yang bisa dianggap sebagai bentuk sederhana dari polymorphism.
public class JFramePendaftaranBuku extends Master { //Inheritance: meng-extend atau mewarisi kelas Master.
    
    private String nama_file = ""; //Enkapsulasi:  Variabel-variabel ini dienkapsulasi di dalam kelas dengan menggunakan akses modifier private.
    
    public String bukuID = ""; 
    public String judul = "";
    public String pengarang = "";
    public String penerbit = "";
    public String tahun = "";
    public String kategori = "";
    public String lokasi = "";

    public JFramePendaftaranBuku() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        sampul = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        judulText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        pengarangText = new javax.swing.JTextField();
        penerbitText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tahunText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        kategoriList = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        lokasiText = new javax.swing.JTextField();
        daftarBtn = new javax.swing.JButton();
        uploadBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 153, 102));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setText("PENDAFTARAN BUKU");

        sampul.setFont(new java.awt.Font("SimSun", 0, 13)); // NOI18N
        sampul.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Judul");

        jLabel2.setText("Pengarang");

        jLabel3.setText("Penerbit");

        jLabel5.setText("Tahun");

        jLabel6.setText("Kategori");

        kategoriList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        kategoriList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kategoriListActionPerformed(evt);
            }
        });

        jLabel7.setText("Lokasi");

        daftarBtn.setText("DAFTAR");
        daftarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                daftarBtnActionPerformed(evt);
            }
        });

        uploadBtn.setText("UPLOAD");
        uploadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadBtnActionPerformed(evt);
            }
        });

        closeBtn.setText("CLOSE");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(penerbitText, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pengarangText, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(judulText)
                    .addComponent(tahunText, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(kategoriList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lokasiText, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(daftarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 213, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sampul, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(closeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(uploadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(121, 121, 121))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(sampul, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(uploadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(judulText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pengarangText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(penerbitText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tahunText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kategoriList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lokasiText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(daftarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(closeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void daftarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_daftarBtnActionPerformed
        judul = judulText.getText();
        pengarang = pengarangText.getText();
        penerbit = penerbitText.getText();
        tahun = tahunText.getText();
        kategori = kategoriList.getSelectedItem().toString();
        lokasi = lokasiText.getText();

        try {
            String sql = "INSERT INTO buku(judul, pengarang, penerbit, tahun, kategori, lokasi)";
            sql += " values(?,?,?,?,?,?)";
            PreparedStatement stmt = (PreparedStatement) db.conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            stmt.setString(1, judul);
            stmt.setString(2, pengarang);
            stmt.setString(3, penerbit);
            stmt.setString(4, tahun);
            stmt.setString(5, kategori);
            stmt.setString(6, lokasi);
            stmt.executeUpdate();
            ResultSet rs = (ResultSet) stmt.getGeneratedKeys(); // getGeneratedKeys() digunakan untuk mendapatkan hasil kunci yang dihasilkan oleh operasi seperti INSERT dengan kolom otomatis bertambah nilainya.
            rs.next();
            String buku_id = rs.getString(1); //digunakan untuk mengambil nilai kolom pertama dari baris saat ini dalam objek ResultSet 

            //UPDATE RECORD YANG BARU SAJA DI MASUKKAN
            String sampul = buku_id + ".jpg";

            try 
            {
                File source = new File(nama_file); //Ini digunakan untuk merepresentasikan file sumber yang akan disalin.
                File dest = new File("img/" + sampul); //Ini digunakan untuk merepresentasikan lokasi tujuan file yang akan disalin.
                FileUtils.copyFile(source, dest);//Baris ini menggunakan metode copyFile() dari kelas FileUtils untuk menyalin file dari sumber ke tujuan. 
        
                //Metode ini menerima dua parameter, yaitu source yang merupakan file sumber yang akan disalin, dan dest yang merupakan lokasi tujuan file yang akan disalin. 
                //Baris ini mengasumsikan bahwa Anda telah mengimpor kelas FileUtils dan telah menyertakan dependensi yang diperlukan.
            } catch (Exception e) {

            }

            sql = "UPDATE buku SET sampul = '" + sampul + "' WHERE buku_id = " + buku_id;
            boolean success = db.Execute(sql);
            if (success) {
                JOptionPane.showMessageDialog(this, "Buku Berhasil Di Daftarkan");
            } else {
                JOptionPane.showMessageDialog(this, "Buku Gagal Di Daftarkan");
            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_daftarBtnActionPerformed

    private void uploadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadBtnActionPerformed
        //https://stackoverflow.com/questions/13516939/how-to-upload-and-display-image-in-jframe-using-jfilechooser

        JFileChooser filechooser = new JFileChooser(); //Membuat objek JFileChooser
        filechooser.setDialogTitle("Choose Your File"); //Membuat objek JFileChooser yang digunakan untuk dialog pemilihan file.
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY); //Mengatur judul dialog pemilihan file yang akan ditampilkan kepada pengguna.
        // Mengatur agar hanya file yang dapat dipilih, bukan direktori. 
        int returnval = filechooser.showOpenDialog(this); 
        if (returnval == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile(); //Mendapatkan file yang dipilih
            //Membaca gambar file
            BufferedImage bi;
            try {
                bi = ImageIO.read(file);
                //Mengubah ukuran gambar
                BufferedImage resizedImage = new BufferedImage(280, 374, BufferedImage.TYPE_INT_RGB);
                Graphics2D g2d = resizedImage.createGraphics();
                g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
                g2d.drawImage(bi, 0, 0, 280, 374, null);
                g2d.dispose();
                sampul.setIcon(new ImageIcon(resizedImage)); //Menampilkan gambar dalam JLabel

                //Mendapatkan direktori tempat file dipilih dan menggabungkannya dengan nama file 
                //yang dipilih untuk mendapatkan path lengkap file.
                String dir = filechooser.getCurrentDirectory().getAbsolutePath();
                nama_file = dir + "\\" + filechooser.getSelectedFile().getName();

            } catch (IOException e) {
                e.printStackTrace(); // todo: implement proper error handeling
            }
            this.pack(); // Menampilkan ulang frame
        }
    }//GEN-LAST:event_uploadBtnActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeBtnActionPerformed

    private void kategoriListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kategoriListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kategoriListActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //https://stackoverflow.com/questions/17887927/adding-items-to-a-jcombobox
        String sql = "SELECT DISTINCT kategori FROM buku WHERE kategori IS NOT NULL";//Pernyataan ini akan mengambil nilai kategori yang unik dari tabel buku di mana nilai kategori tidak null.
        ResultSet rs = (ResultSet) db.getRS(sql);//Objek ResultSet akan digunakan untuk mengiterasi dan mendapatkan data yang dihasilkan dari pernyataan SQL.
        try {
            kategoriList.removeAllItems(); //Tindakan ini dilakukan untuk membersihkan JComboBox sebelum menambahkan item baru.
            while (rs.next()) {
                String kategori = rs.getString("kategori"); //Baris ini mengambil nilai kolom "kategori" dari baris saat ini dalam ResultSet dan menyimpannya dalam variabel 
                kategoriList.addItem(kategori);//Baris ini menambahkan nilai kategori ke dalam JComboBox cbKategori sebagai item baru.
            }
        } catch (Exception e) {
    }//GEN-LAST:event_formWindowOpened
    
    private void getBukuInfo(String bukuID) {
        try {
            String sql = "SELECT * FROM buku WHERE buku_id = " + bukuID;
            ResultSet rs = (ResultSet) db.getRS(sql);
            if (rs.next()) {
                judulText.setText(rs.getString("judul"));
                pengarangText.setText(rs.getString("pengarang"));
                penerbitText.setText(rs.getString("penerbit"));
                tahunText.setText(rs.getString("tahun"));
                kategoriList.setSelectedItem(rs.getString("kategori"));
                lokasiText.setText(rs.getString("lokasi"));
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFramePendaftaranBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFramePendaftaranBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFramePendaftaranBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFramePendaftaranBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFramePendaftaranBuku().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeBtn;
    private javax.swing.JButton daftarBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField judulText;
    private javax.swing.JComboBox<String> kategoriList;
    private javax.swing.JTextField lokasiText;
    private javax.swing.JTextField penerbitText;
    private javax.swing.JTextField pengarangText;
    private javax.swing.JLabel sampul;
    private javax.swing.JTextField tahunText;
    private javax.swing.JButton uploadBtn;
    // End of variables declaration//GEN-END:variables
}

//Menggunakan beberapa konsep dasar seperti inheritance, encapsulation, dan event handling untuk mengelola interaksi pengguna.
